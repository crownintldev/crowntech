generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            Int @id @default(autoincrement())
  fullName      String
  phoneNumber   String
  userName      String
  email         String @unique
  password      String
  createdAt     DateTime @default(now())
}

model Contact{
  id            Int @id @default(autoincrement())
  Name          String
  email         String
  phoneNumber   String
  companyName   String
  subject       String
  Comment       String
  createdAt     DateTime @default(now())
}

model Servicecategory {
  id          Int            @id @default(autoincrement())
  catName     String
  createdAt   DateTime       @default(now())
  serviceInfos Serviceinfo[]
}

model Serviceinfo {
  id            Int          @id @default(autoincrement())
  serviceImage  String?
  serviceName   String
  serviceText   String
  createdAt     DateTime     @default(now())
  categoryId    Int
  category      Servicecategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  servicetabs   Servicetab[]
}

model Servicetab {
  id             Int            @id @default(autoincrement())
  title          String?
  heading        String?
  description    String?
  subdata        ServiceSubItem[]
  createdAt      DateTime       @default(now())
  serviceInfoId  Int?
  serviceInfos   Serviceinfo?    @relation(fields: [serviceInfoId], references: [id], onDelete: Cascade)
  serviceplans   Serviceplan[]
}

model ServiceSubItem {
  id               Int          @id @default(autoincrement())
  link             String?
  description      String?
  mainItemId       Int
  mainItem         Servicetab?    @relation(fields: [mainItemId], references: [id], onDelete: Cascade)
}
model Serviceplan {
  id              Int      @id @default(autoincrement())
  title           String
  text            String?
  price           String
  chooseplan      String?
  description     String?
  feature         Servicefeature[]
  createdAt       DateTime @default(now())
  tabId           Int
  tab             Servicetab @relation(fields: [tabId], references: [id], onDelete: Cascade)
  servicefaqs     Servicefaq[]
}
model Servicefeature {
  id              Int         @id @default(autoincrement())
  option          String
  mainItemId      Int
  mainItem        Serviceplan @relation(fields: [mainItemId], references: [id], onDelete: Cascade)
}

model Servicefaq {
  id              Int      @id @default(autoincrement())
  Faqimage        String?
  heading         String?
  description     String?
  createdAt       DateTime @default(now())
  planId          Int?     // Add this field to reference Serviceplan
  plan            Serviceplan? @relation(fields: [planId], references: [id], onDelete: Cascade)
}